// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getOrders = `-- name: GetOrders :many
SELECT id, user_id, prod_id, created_at, price, quantity FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrders(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProdID,
			&i.CreatedAt,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderItem = `-- name: OrderItem :one
INSERT INTO orders(id, user_id, prod_id, created_at, price, quantity)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, prod_id, created_at, price, quantity
`

type OrderItemParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ProdID    uuid.UUID
	CreatedAt time.Time
	Price     int32
	Quantity  int32
}

func (q *Queries) OrderItem(ctx context.Context, arg OrderItemParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, orderItem,
		arg.ID,
		arg.UserID,
		arg.ProdID,
		arg.CreatedAt,
		arg.Price,
		arg.Quantity,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProdID,
		&i.CreatedAt,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}
