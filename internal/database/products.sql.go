// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(id, created_at, updated_at, name, description, image, price, quantity)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, description, image, price, quantity
`

type CreateProductParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
	Image       string
	Price       int32
	Quantity    int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Price,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE id = $1
RETURNING id, created_at, updated_at, name, description, image, price, quantity
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, created_at, updated_at, name, description, image, price, quantity FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, created_at, updated_at, name, description, image, price, quantity FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET updated_at = $1,
    name = $2,
    description = $3,
    image = $4,
    price = $5,
    quantity = $6
WHERE id = $7
RETURNING id, created_at, updated_at, name, description, image, price, quantity
`

type UpdateProductParams struct {
	UpdatedAt   time.Time
	Name        string
	Description string
	Image       string
	Price       int32
	Quantity    int32
	ID          uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Price,
		arg.Quantity,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}
