// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: carts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :one
WITH valid_quantity AS (
    SELECT id FROM products
    WHERE id = $3 AND quantity >= $6
)
INSERT INTO carts(id, user_id, prod_id, updated_at, price, quantity) 
SELECT $1, $2, $3, $4, $5, $6
FROM valid_quantity
WHERE EXISTS (
    SELECT 1 FROM valid_quantity
)
RETURNING id, user_id, prod_id, updated_at, price, quantity
`

type AddToCartParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ProdID    uuid.UUID
	UpdatedAt time.Time
	Price     int32
	Quantity  int32
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, addToCart,
		arg.ID,
		arg.UserID,
		arg.ProdID,
		arg.UpdatedAt,
		arg.Price,
		arg.Quantity,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProdID,
		&i.UpdatedAt,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM carts
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, id)
	return err
}

const getCart = `-- name: GetCart :many
SELECT c.id, c.user_id, c.prod_id, c.updated_at, c.price, c.quantity, p.name AS product_name, p.description AS product_description, p.image AS product_image
FROM carts c
JOIN products p ON c.prod_id = p.id
WHERE c.user_id = $1
`

type GetCartRow struct {
	ID                 uuid.UUID
	UserID             uuid.UUID
	ProdID             uuid.UUID
	UpdatedAt          time.Time
	Price              int32
	Quantity           int32
	ProductName        string
	ProductDescription string
	ProductImage       string
}

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) ([]GetCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProdID,
			&i.UpdatedAt,
			&i.Price,
			&i.Quantity,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :one
UPDATE carts
SET quantity = $1, updated_at = $2,
price = $3
WHERE id = $4
RETURNING id, user_id, prod_id, updated_at, price, quantity
`

type UpdateCartParams struct {
	Quantity  int32
	UpdatedAt time.Time
	Price     int32
	ID        uuid.UUID
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart,
		arg.Quantity,
		arg.UpdatedAt,
		arg.Price,
		arg.ID,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProdID,
		&i.UpdatedAt,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}
